// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProxyOwnershipTransferred extends ethereum.Event {
  get params(): ProxyOwnershipTransferred__Params {
    return new ProxyOwnershipTransferred__Params(this);
  }
}

export class ProxyOwnershipTransferred__Params {
  _event: ProxyOwnershipTransferred;

  constructor(event: ProxyOwnershipTransferred) {
    this._event = event;
  }

  get _previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get _newVersion(): string {
    return this._event.parameters[0].value.toString();
  }

  get _newImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  proxyOwner(): Address {
    let result = super.call("proxyOwner", "proxyOwner():(address)", []);

    return result[0].toAddress();
  }

  try_proxyOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("proxyOwner", "proxyOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  holderCount(): BigInt {
    let result = super.call("holderCount", "holderCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_holderCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("holderCount", "holderCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getterDelegate(): Address {
    let result = super.call("getterDelegate", "getterDelegate():(address)", []);

    return result[0].toAddress();
  }

  try_getterDelegate(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getterDelegate",
      "getterDelegate():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  currentCheckpointId(): BigInt {
    let result = super.call(
      "currentCheckpointId",
      "currentCheckpointId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentCheckpointId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentCheckpointId",
      "currentCheckpointId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  granularity(): BigInt {
    let result = super.call("granularity", "granularity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_granularity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("granularity", "granularity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dataStore(): Address {
    let result = super.call("dataStore", "dataStore():(address)", []);

    return result[0].toAddress();
  }

  try_dataStore(): ethereum.CallResult<Address> {
    let result = super.tryCall("dataStore", "dataStore():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  polyToken(): Address {
    let result = super.call("polyToken", "polyToken():(address)", []);

    return result[0].toAddress();
  }

  try_polyToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("polyToken", "polyToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  polymathRegistry(): Address {
    let result = super.call(
      "polymathRegistry",
      "polymathRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_polymathRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "polymathRegistry",
      "polymathRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controllerDisabled(): boolean {
    let result = super.call(
      "controllerDisabled",
      "controllerDisabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_controllerDisabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "controllerDisabled",
      "controllerDisabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  moduleRegistry(): Address {
    let result = super.call("moduleRegistry", "moduleRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_moduleRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "moduleRegistry",
      "moduleRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  securityTokenRegistry(): Address {
    let result = super.call(
      "securityTokenRegistry",
      "securityTokenRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_securityTokenRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "securityTokenRegistry",
      "securityTokenRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenDetails(): string {
    let result = super.call("tokenDetails", "tokenDetails():(string)", []);

    return result[0].toString();
  }

  try_tokenDetails(): ethereum.CallResult<string> {
    let result = super.tryCall("tokenDetails", "tokenDetails():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  transfersFrozen(): boolean {
    let result = super.call("transfersFrozen", "transfersFrozen():(bool)", []);

    return result[0].toBoolean();
  }

  try_transfersFrozen(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transfersFrozen",
      "transfersFrozen():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenFactory(): Address {
    let result = super.call("tokenFactory", "tokenFactory():(address)", []);

    return result[0].toAddress();
  }

  try_tokenFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenFactory", "tokenFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ProxyOwnerCall extends ethereum.Call {
  get inputs(): ProxyOwnerCall__Inputs {
    return new ProxyOwnerCall__Inputs(this);
  }

  get outputs(): ProxyOwnerCall__Outputs {
    return new ProxyOwnerCall__Outputs(this);
  }
}

export class ProxyOwnerCall__Inputs {
  _call: ProxyOwnerCall;

  constructor(call: ProxyOwnerCall) {
    this._call = call;
  }
}

export class ProxyOwnerCall__Outputs {
  _call: ProxyOwnerCall;

  constructor(call: ProxyOwnerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class VersionCall extends ethereum.Call {
  get inputs(): VersionCall__Inputs {
    return new VersionCall__Inputs(this);
  }

  get outputs(): VersionCall__Outputs {
    return new VersionCall__Outputs(this);
  }
}

export class VersionCall__Inputs {
  _call: VersionCall;

  constructor(call: VersionCall) {
    this._call = call;
  }
}

export class VersionCall__Outputs {
  _call: VersionCall;

  constructor(call: VersionCall) {
    this._call = call;
  }

  get value0(): string {
    return this._call.outputValues[0].value.toString();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get _newVersion(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _newImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class ImplementationCall extends ethereum.Call {
  get inputs(): ImplementationCall__Inputs {
    return new ImplementationCall__Inputs(this);
  }

  get outputs(): ImplementationCall__Outputs {
    return new ImplementationCall__Outputs(this);
  }
}

export class ImplementationCall__Inputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }
}

export class ImplementationCall__Outputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get _newVersion(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _newImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class TransferProxyOwnershipCall extends ethereum.Call {
  get inputs(): TransferProxyOwnershipCall__Inputs {
    return new TransferProxyOwnershipCall__Inputs(this);
  }

  get outputs(): TransferProxyOwnershipCall__Outputs {
    return new TransferProxyOwnershipCall__Outputs(this);
  }
}

export class TransferProxyOwnershipCall__Inputs {
  _call: TransferProxyOwnershipCall;

  constructor(call: TransferProxyOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferProxyOwnershipCall__Outputs {
  _call: TransferProxyOwnershipCall;

  constructor(call: TransferProxyOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _decimals(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _granularity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _tokenDetails(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _polymathRegistry(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
